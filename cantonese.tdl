;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Cantonese
;;; created at:
;;;     Tue Jan 10 14:45:21 UTC 2023
;;; based on Matrix customization system version of:
;;;     Fri 10 Jun 2022 12:58:58 AM UTC
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT #light,
             LOCAL.CAT [ HC-LIGHT #light,
                         MC #mc ] ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head :+ [ PRON bool,
    POSSESSOR poss,
    INIT bool ].

png :+ [ PER person ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Possession

possessive-2 := possessive.  ; supertype for strategy 2
possessor-2 := possessor & possessive-2.
possessum-2 := possessum & possessive-2.

;;; sub-part-of-speech: 

common := noun. 
proper :=noun.
kin-or-role :=noun. 

kin := kin-or-role.
role := kin-or-role. 




;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

wh-pronoun-noun-lex := basic-wh-word-lex & norm-hook-lex-item & basic-icons-lex-item & non-mod-lex-item & zero-arg-que &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ],
                     CONT [ RELS.LIST < [ LBL #larg,
                                          ARG0 ref-ind & #arg0 ],
                                        quant-relation &
                                        [ PRED "which_q_rel",
                                          ARG0 #arg0,
                                          RSTR #harg ] >,
                            HCONS.LIST < [ HARG #harg,
                                           LARG #larg ] > ] ],
             NON-LOCAL.QUE.LIST < #arg0 > ] ].

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common-noun-lex := noun-lex &
[ SYNSEM.LOCAL.CAT.HEAD common ].

pronoun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

proper-noun-lex := noun-lex &
[ SYNSEM.LOCAL.CAT.HEAD proper].


interrogative_pronoun-noun-lex := wh-pronoun-noun-lex.

kin-noun-lex := noun-lex & 
 [ SYNSEM.LOCAL.CAT.HEAD kin ].
 
role-noun-lex :=noun-lex &
 [ SYNSEM.LOCAL.CAT.HEAD role ].


;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    SYNSEM.LOCAL.CAT [ VAL.COMPS < #comps >,
                       HEAD.INIT + ] ].

simple_intransitive-verb-lex := intransitive-verb-lex.

simple_transitive-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT + ].

strict_transitive-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

copula-verb-lex := simple_transitive-verb-lex.

no-obj-drop-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

obj-drop-verb-lex := transitive-verb-lex.

;;; Complementizers

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

q-particle1-lex := qpart-lex-item &
  [ SYNSEM.LOCAL.CAT [ MC #mc,
                       VAL.COMPS.FIRST.LOCAL.CAT [ MC #mc & +,
                                                   WH.BOOL - ] ] ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       HEAD.INIT + ] ].

demonstrative-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

;;; Adverbs

two-rel-adposition-lex := basic-icons-lex-item & non-local-none-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD adp,
                           VAL.COMPS < [ LOCAL [ CAT cat-sat,
                                                 CONT.HOOK #hook &
                                                           [ INDEX #ind,
                                                             ICONS-KEY.IARG1 #clause ] ] ] > ],
                     CONT.HOOK #hook &
                               [ CLAUSE-KEY #clause ] ],
             LKEYS.KEYREL arg12-ev-relation &
                          [ ARG2 #ind ] ] ].

possessor-adp-lex-1 := two-rel-adposition-lex &
"""
This is the possesive marker, it takes a complement on the left (the possesor: ARG2) and modifies the possessee (ARG1) on the right.
<ex> 我 嘅 朋友 鍾意 大笨象 
"""
  [ SYNSEM.LOCAL [ CAT [ POSTHEAD -,
                         VAL [ SPEC < >,
                               SUBJ < >,
                               SPR < >,
                               COMPS.FIRST [ OPT -,
                                             LOCAL [ CAT [ HEAD noun,
                                                           VAL.SPR < > ],
                                                     CONT.HOOK.INDEX #possessor ] ] ],
                         HEAD [ INIT -,
                                POSSESSOR possessor-1,
                                MOD.FIRST.LOCAL [ CAT [ VAL.SPR < [ ] >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK [ INDEX #possessum,
                                                              LTOP #lbl ] ] ] ],
                   CONT [ ICONS.LIST < >,
                          HCONS.LIST < >,
                          RELS.LIST < arg12-ev-relation &
                                      [ PRED "poss_p_rel",
                                        LBL #lbl,
                                        ARG1 #possessum,
                                        ARG2 #possessor ] > ] ] ].

basic-adposition-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Lexical rule types

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; The head of head-comp-phrase can't be: ['comp' or 'adp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT +,
    SYNSEM.LOCAL.CAT.HEAD +nvjrdmo ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; comp-head-phrase requires things that are [ HEAD comp or adp ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT -,
    SYNSEM.LOCAL.CAT.HEAD +pc ].

possessum-mod-rule := basic-head-mod-phrase-simple &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD.FIRST.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

adj-head-int-phrase :+ possessum-mod-rule.

poss-phrase-2 := head-final & binary-nonloc-phrase & 
"""
The rule takes two nouns, both are not 'specified'. The left-hand daughter
must be a word; the right-hand daughter must be a kin, both will be made definite.

<ex> 明恩 細妹 笑
<ex> 我 細佬 鍾意 大笨象
<ex> 我 老師 笑      

<nex> 明恩 我 笑
<nex> 我 嘅 朋友 細妹 笑

to-do: currently, the righ-head daughter must be kin, but we should allow role nouns, like 老師.
"""
  [ NON-HEAD-DTR word & [SYNSEM.LOCAL [ CAT [ POSSESSUM nonpossessive,
                                      HEAD noun &
                                           [ POSSESSOR nonpossessive ],
                                      VAL.SPR < unexpressed &
                                              [ LOCAL.CAT.HEAD +nd,
                                                OPT + ] > ],
                                CONT.HOOK [ LTOP #possessor_lbl,
                                            INDEX #possessor ] ] ],
    SYNSEM.LOCAL.CAT [ HEAD kin-or-role  & #head,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < > ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ POSSESSUM nonpossessive,
                                  HEAD #head & noun &
                                       [ POSSESSOR nonpossessive,
                                         PRON - ],
                                  VAL.SPR < [ ] > ],
                            CONT.HOOK #hook &
                                      [ LTOP #possessum_lbl,
                                        INDEX #possessum &
                                              [ COG-ST uniq-id ] ] ],
    C-CONT [ HOOK #hook &
                  [ INDEX #possessum ],
             ICONS.LIST < >,
             RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_p_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "def_q_rel",
                           ARG0 #possessum,
                           RSTR #possessum_harg ], 
                         quant-relation &
                         [ PRED "def_q_rel",
                           ARG0 #possessor,
                           RSTR #possessor_harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #possessor_harg,
                            LARG #possessor_lbl ], 
                          qeq &
                          [ HARG #possessum_harg,
                            LARG #possessum_lbl ] > ] ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

;;; Wh-question-related phrasal types

; In-situ interrogative clause.

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

insitu-int-cl := interrogative-clause & head-only &
  [ C-CONT [ RELS.LIST < >,
             HCONS.LIST < > ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD verb,
                                  VAL #val &
                                      [ SUBJ < >,
                                        COMPS < > ] ],
                      NON-LOCAL [ SLASH.LIST < >,
                                  REL.LIST < >,
                                  QUE.LIST.FIRST ref-ind ] ],
    SYNSEM [ MODIFIED hasmod,
             NON-LOCAL [ SLASH.LIST < >,
                         QUE.LIST < >,
                         REL.LIST < > ],
             LOCAL.CAT [ VAL #val,
                         MC bool,
                         WH.BOOL + ] ] ].
                         
                         
;; Type for negative adverbs.

;; SSH 2015-01-26: Why is [ MC + ] needed?
;; ZZF 2016-11-4: negation adverb also modifies adj，and it's scopal modifier, not SPR (therefore SPEC < >). Only degree adverbs are specifiers.
;; ZZF 2016-12-8: taking out "LIGHT +," from MOD, to allow "不 常 来", "不 太 喜欢"
neg-adv-lex := basic-scopal-adv-lex & non-local-none-lex-item &
"""
Tentatively we are setting the MOD's COMP value to empty (< >) to avoid ambiguity on the level of attachment. 

FIXME:
For educational purposes, we want to block 不 before degree specifiers (e.g., 他 不 很 高 。). 
But it is not clear whether this is problematic in casual speech -- we might not want to block it altogether.
We experimented with setting the SPR to  <[ ]> (a list of length one) to make 不 select the adjective before the degree specifier. But this does not work:
Verbs come with empty specifiers (SPR < >). Adjectives come looking for a optional single specifier (SPR <[ ]>) that is their degree specifier.
Therefore, we can't use SPR to block the order in which 不 appears.

<ex>??? 他 不 很 高 。
<ex>他 不 高 。
<ex>他 很 不 高 。
<ex>他 很 不 好吃 。
<ex>你 不 知道 。


Let's say: Thre is a  the scopal BU could be used for 1,2,5 and then we could ave a lexical BU
Lexical BU would be a degree specifier...  and scopal BU does not take degree spc.

EVERYONE NOT HAPPY.  >>> 

If we have a non-scopal that REQUIRES a degree-SPR.  +  a scopal that IS a degree-SPR.
maybe a specl head-spr rule : the normal rule would be intersective; This would have to ALSO allow to be specified FURTHER 
the special one would be scopal and allow BU

"""
  [ SYNSEM.LOCAL.CAT [ VAL [ COMPS < >,
			     SPEC < > ],
		       HEAD.MOD < [ LOCAL.CAT [ HEAD +vj,
						VAL [SUBJ cons,
						     COMPS < >] ] ] > ] ].


;;redefining the types in matrix.tdl. Taken out raise-index-mod-lex-item from basic-adverb-lex and put it in basic-scopal-adverb-lex. 
basic-adv-lex :=  single-rel-lex-item & basic-icons-lex-item &
  [ SYNSEM [LOCAL.CAT.HEAD adv,
	     LKEYS.KEYREL event-relation ]].

;;zzf and fb 2016-11-7  
;;raise-index-mod-lex-item its HOOK.INDEX is the same as that of the thing it modifies
;;removing SPR as scopal adverbs don't seem to take degree specifiers.
basic-scopal-adv-lex := basic-adv-lex & scopal-mod-lex & raise-index-mod-lex-item &
  [ SYNSEM [ LOCAL.CAT.VAL [ SUBJ < >,
                             SPR < > ] ] ].
;;                             SPR < [ LOCAL.CAT [ HEAD adv,
;;                                                 VAL.SPEC < [ LOCAL.CAT.HEAD adv ] > ] ] ;;> ] ] ].

